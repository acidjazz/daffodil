var Spa;

Spa = {
  sections: {
    home: 'Home',
    services: 'Services',
    portfolio: 'Portfolio',
    about: 'About'
  },
  i: function() {
    console.log('SPA initiation');
    Spa.handlers();
    if (Object.keys(Spa.sections).indexOf(location.hash.replace('#', '')) !== -1) {
      return Spa.menu(location.hash.replace('#', ''));
    } else {
      return Spa.menu('home');
    }
  },
  handlers: function() {
    return $('.header > .menu > a.item, .submenu > a.item').click(Spa.menuHandler);
  },
  menuHandler: function() {
    Spa.menu($(this).data('section'));
    return window.scrollTo(0, 0);
  },
  menu: function(to) {
    var current, srces;
    current = $('.header > .menu > a.item.on').text();
    console.log(current);
    console.log(current + " -> " + to);
    _.off(".header > .menu > a.item.item_" + current);
    _.on(".header > .menu > a.item.item_" + to);
    if (current !== '') {
      window[Spa.sections[current]].d();
    }
    if (current !== '') {
      _.off("." + current + ".section");
    }
    _.on('.loader');
    srces = Spa.srces($("." + to + ".section div"));
    return Spa.preload(srces, function(progress) {
      $('.loader > .inner > .full').css('width', (progress * 100) + "%");
      return console.log(progress);
    }, function(complete) {
      $('.loader > .inner > .full').css('width', '100%');
      _.off('.loader');
      _.on("." + to + ".section");
      return setTimeout(function() {
        return $('.loader > .inner > .full').css('width', '0%');
      }, 1000);
    }, window[Spa.sections[to]].i());
  },
  srces: function(el) {
    var srces;
    srces = [];
    el.each(function(i, el) {
      var src;
      src = Spa.srcFromStyle($(el));
      if (src !== false && src !== void 0) {
        return srces.push(src);
      }
    });
    return srces;
  },
  srcFromStyle: function(el) {
    var style, url;
    style = el.attr('style');
    if (style === void 0) {
      return false;
    }
    url = style.match(/url\((.*)\)/);
    if (url !== null && url[1] !== void 0) {
      return url[1];
    } else {
      console.log('ERROR cannot find style for element', style);
      return console.log(url);
    }
  },
  preload: function(srces, progress, complete) {
    var i, images, j, len, loaded, results, src, total;
    images = [];
    loaded = 0;
    total = srces.length;
    if (total === 0) {
      complete(true);
    }
    results = [];
    for (i = j = 0, len = srces.length; j < len; i = ++j) {
      src = srces[i];
      images[i] = new Image();
      images[i].src = src.replace(/"/g, '').trim();
      results.push(images[i].onload = function() {
        var perc;
        loaded++;
        perc = Math.round(loaded / total * 100) / 100;
        if (loaded === total) {
          return complete(true);
        } else {
          return progress(perc);
        }
      });
    }
    return results;
  }
};

//# sourceMappingURL=data:application/json;base64,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QWdCLElBQUEsS0FBQSxDQUFBO01BQ2hCLE1BQU8sQ0FBQSxDQUFBLENBQUUsQ0FBQyxHQUFWLEdBQWdCLEdBQUcsQ0FBQyxPQUFKLENBQVksSUFBWixFQUFrQixFQUFsQixDQUFxQixDQUFDLElBQXRCLENBQUE7bUJBQ2hCLE1BQU8sQ0FBQSxDQUFBLENBQUUsQ0FBQyxNQUFWLEdBQW1CLFNBQUE7QUFDakIsWUFBQTtRQUFBLE1BQUE7UUFDQSxJQUFBLEdBQU8sSUFBSSxDQUFDLEtBQUwsQ0FBVyxNQUFBLEdBQU8sS0FBUCxHQUFhLEdBQXhCLENBQUEsR0FBNkI7UUFDcEMsSUFBRyxNQUFBLEtBQVUsS0FBYjtpQkFBd0IsUUFBQSxDQUFTLElBQVQsRUFBeEI7U0FBQSxNQUFBO2lCQUE0QyxRQUFBLENBQVMsSUFBVCxFQUE1Qzs7TUFIaUI7QUFIckI7O0VBUk8sQ0F6RVQiLCJmaWxlIjoic3BhLmpzIiwic291cmNlUm9vdCI6Ii9zb3VyY2UvIiwic291cmNlc0NvbnRlbnQiOlsiU3BhID1cbiAgICBcbiAgc2VjdGlvbnM6XG4gICAgaG9tZTogJ0hvbWUnXG4gICAgc2VydmljZXM6ICdTZXJ2aWNlcydcbiAgICBwb3J0Zm9saW86ICdQb3J0Zm9saW8nXG4gICAgYWJvdXQ6ICdBYm91dCdcblxuICBpOiAtPlxuICAgIGNvbnNvbGUubG9nICdTUEEgaW5pdGlhdGlvbidcblxuICAgIFNwYS5oYW5kbGVycygpXG5cblxuICAgIGlmIE9iamVjdC5rZXlzKFNwYS5zZWN0aW9ucykuaW5kZXhPZihsb2NhdGlvbi5oYXNoLnJlcGxhY2UoJyMnLCcnKSkgaXNudCAtMVxuICAgICAgU3BhLm1lbnUgbG9jYXRpb24uaGFzaC5yZXBsYWNlICcjJywgJydcbiAgICBlbHNlXG4gICAgICBTcGEubWVudSAnaG9tZSdcblxuICBoYW5kbGVyczogLT5cblxuICAgICQoJy5oZWFkZXIgPiAubWVudSA+IGEuaXRlbSwgLnN1Ym1lbnUgPiBhLml0ZW0nKS5jbGljayBTcGEubWVudUhhbmRsZXJcblxuICBtZW51SGFuZGxlcjogLT5cbiAgICBTcGEubWVudSAkKHRoaXMpLmRhdGEgJ3NlY3Rpb24nXG4gICAgd2luZG93LnNjcm9sbFRvIDAsIDBcblxuICBtZW51OiAodG8pIC0+XG5cbiAgICBjdXJyZW50ID0gJCgnLmhlYWRlciA+IC5tZW51ID4gYS5pdGVtLm9uJykudGV4dCgpXG4gICAgY29uc29sZS5sb2cgY3VycmVudFxuXG4gICAgY29uc29sZS5sb2cgXCIje2N1cnJlbnR9IC0+ICN7dG99XCJcblxuICAgIF8ub2ZmIFwiLmhlYWRlciA+IC5tZW51ID4gYS5pdGVtLml0ZW1fI3tjdXJyZW50fVwiXG4gICAgXy5vbiBcIi5oZWFkZXIgPiAubWVudSA+IGEuaXRlbS5pdGVtXyN7dG99XCJcblxuICAgIHdpbmRvd1tTcGEuc2VjdGlvbnNbY3VycmVudF1dLmQoKSBpZiBjdXJyZW50IGlzbnQgJydcblxuICAgIF8ub2ZmIFwiLiN7Y3VycmVudH0uc2VjdGlvblwiIGlmIGN1cnJlbnQgaXNudCAnJ1xuXG4gICAgXy5vbiAnLmxvYWRlcidcbiAgICBzcmNlcyA9IFNwYS5zcmNlcyAkKFwiLiN7dG99LnNlY3Rpb24gZGl2XCIpXG4gICAgU3BhLnByZWxvYWQgc3JjZXMsXG4gICAgICAocHJvZ3Jlc3MpIC0+XG4gICAgICAgICQoJy5sb2FkZXIgPiAuaW5uZXIgPiAuZnVsbCcpLmNzcyAnd2lkdGgnLCBcIiN7cHJvZ3Jlc3MqMTAwfSVcIlxuICAgICAgICBjb25zb2xlLmxvZyBwcm9ncmVzc1xuICAgICAgLCAoY29tcGxldGUpIC0+XG4gICAgICAgICQoJy5sb2FkZXIgPiAuaW5uZXIgPiAuZnVsbCcpLmNzcyAnd2lkdGgnLCAnMTAwJSdcbiAgICAgICAgXy5vZmYgJy5sb2FkZXInXG4gICAgICAgIF8ub24gXCIuI3t0b30uc2VjdGlvblwiXG4gICAgICAgIHNldFRpbWVvdXQgLT5cbiAgICAgICAgICAkKCcubG9hZGVyID4gLmlubmVyID4gLmZ1bGwnKS5jc3MgJ3dpZHRoJywgJzAlJ1xuICAgICAgICAsIDEwMDBcblxuICAgICAgd2luZG93W1NwYS5zZWN0aW9uc1t0b11dLmkoKVxuXG4gIHNyY2VzOiAoZWwpIC0+XG4gICAgc3JjZXMgPSBbXVxuICAgIGVsLmVhY2ggIChpLCBlbCkgLT5cbiAgICAgIHNyYyA9IFNwYS5zcmNGcm9tU3R5bGUgJChlbClcbiAgICAgIGlmIHNyYyBpc250IGZhbHNlIGFuZCBzcmMgaXNudCB1bmRlZmluZWRcbiAgICAgICAgc3JjZXMucHVzaCBzcmNcbiAgICByZXR1cm4gc3JjZXNcblxuICBzcmNGcm9tU3R5bGU6IChlbCkgLT5cbiAgICBzdHlsZSA9IGVsLmF0dHIgJ3N0eWxlJ1xuICAgIHJldHVybiBmYWxzZSBpZiBzdHlsZSBpcyB1bmRlZmluZWRcbiAgICB1cmwgPSBzdHlsZS5tYXRjaCgvdXJsXFwoKC4qKVxcKS8pXG4gICAgaWYgdXJsIGlzbnQgbnVsbCBhbmQgdXJsWzFdIGlzbnQgdW5kZWZpbmVkXG4gICAgICByZXR1cm4gdXJsWzFdXG4gICAgZWxzZVxuICAgICAgY29uc29sZS5sb2cgJ0VSUk9SIGNhbm5vdCBmaW5kIHN0eWxlIGZvciBlbGVtZW50Jywgc3R5bGVcbiAgICAgIGNvbnNvbGUubG9nIHVybFxuXG4gIHByZWxvYWQ6IChzcmNlcywgcHJvZ3Jlc3MsIGNvbXBsZXRlKSAtPlxuXG4gICAgaW1hZ2VzID0gW11cbiAgICBsb2FkZWQgPSAwXG4gICAgdG90YWwgPSBzcmNlcy5sZW5ndGhcblxuICAgIGNvbXBsZXRlIHRydWUgaWYgdG90YWwgaXMgMFxuXG4gICAgZm9yIHNyYywgaSBpbiBzcmNlc1xuICAgICAgaW1hZ2VzW2ldID0gbmV3IEltYWdlKClcbiAgICAgIGltYWdlc1tpXS5zcmMgPSBzcmMucmVwbGFjZSgvXCIvZywgJycpLnRyaW0oKVxuICAgICAgaW1hZ2VzW2ldLm9ubG9hZCA9IC0+XG4gICAgICAgIGxvYWRlZCsrXG4gICAgICAgIHBlcmMgPSBNYXRoLnJvdW5kKGxvYWRlZC90b3RhbCoxMDApLzEwMFxuICAgICAgICBpZiBsb2FkZWQgaXMgdG90YWwgdGhlbiBjb21wbGV0ZSh0cnVlKSBlbHNlIHByb2dyZXNzKHBlcmMpXG5cbiJdfQ==
